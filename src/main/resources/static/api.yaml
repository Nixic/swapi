openapi: 3.0.3
info:
  title: Swagger API Example - OpenAPI 3.0
  description: |-
    This is a Swagger API Example project based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: User
    description: Operations about user
paths:
  /user/auth:
    get:
      tags:
        - User
      summary: Get JWT token by username and password
      description: 'This mock method returned token for any username and password'
      operationId: authUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user:
    post:
      tags:
        - User
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
# getting all users is unsafe. It just one example how get list of objects.
#  /user/list:
#    get:
#      tags:
#        - User
#      summary: List of users
#      description: Get list of users.
#      operationId: getUsers
#      responses:
#        '200':
#          description: Successful operation
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/User'
#            application/xml:
#              schema:
#                $ref: '#/components/schemas/User'
#        default:
#          description: successful operation
  /user/createWithList:
    post:
      tags:
        - User
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - User
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - User
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - User
      summary: Delete user
      description: Not available yet. This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/logout:
    get:
      tags:
        - User
      summary: Logout method. Adds current token to blacklist
      description: 'Not available yet'
      operationId: logoutUser
      parameters: [ ]
      responses:
        default:
          description: successful operation
components:
  schemas:
    User:
      type: object
      x-class-extra-annotation: "@javax.persistence.Entity
      \n@javax.persistence.Table(name = \"users\")"
      required:
        - username
      properties:
        id:
          type: integer
          x-field-extra-annotation: "@javax.persistence.Id
          \n  @javax.persistence.GeneratedValue(strategy=javax.persistence.GenerationType.AUTO)
          \n  @javax.persistence.Column(name = \"id\")"
          format: int64
#          example: 10
          x-jpa-id: true
        username:
          type: string
#          example: theUser
        firstName:
          type: string
#          example: John
        lastName:
          type: string
#          example: James
        email:
          type: string
#          example: john@email.com
        password:
          type: string
#          example: '12345'
        phone:
          type: string
#          example: '+0123456789'
        userStatus:
          type: integer
          description: User Status
          format: int32
#          example: 1
      xml:
        name: user
      example:
        username: theUser
        firstName: John
        lastName: James
        email: john@email.com
        password: '1234567'
        phone: '+0123456789'
        userStatus: 1
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

security:
  - bearerAuth: [ ]